rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
    match /fcmTokens/{userId} {
      function isOwner(){
        return request.auth.uid == userId;
      }
      allow read; // TODO move to cloud functions
      allow create, update: if isOwner();
    }
    match /users/{userId} {
      function isOwner(){
        return request.auth.uid == userId;
      }
      allow read; // TODO move to cloud functions
      allow create, update: if isOwner();
    }
    
		match /todoLists/{listId} {
    	function getTodoList(){
      	return get(/databases/$(database)/documents/todoLists/$(listId)).data;
      }
      // Since the owner is added as member, this function is not actually required
			// I keep it for implementation change
    	function isOwner(){
      	return resource.data.userId == request.auth.uid;
      }
    	//function isMember(){
      	//let todoList = getTodoList();
        //return todoList.members.get([request.auth.uid, "userId"], null) == request.auth.uid;
      //}
      function hasWriteAccess(){
        let todoList = getTodoList(); 
        return todoList.members.get([request.auth.uid, "canEdit"], null) == true;
      }
    	//allow read: if request.auth != null &&  ( isOwner() || isMember() );
      allow read: if request.auth != null;
      allow create:
      if  request.auth != null;
      allow delete:
      	if  request.auth != null && isOwner();
      allow update:
        if request.auth != null && ( isOwner() || hasWriteAccess() );
    }
    
    match /tasks/{taskId} {
    	function getTodoList(){
      	return get(/databases/$(database)/documents/todoLists/resource.data.listId).data;
      }
      // Since the owner is added as member, this function is not actually required
			// I keep it for implementation change
    	function isOwner(){
      	let todoList = getTodoList();
        return todoList.userId == request.auth.uid;
      }
    	//function isMember(){
      	//let todoList = getTodoList();
        //return todoList.members.get([request.auth.uid, "userId"], null) == request.auth.uid;
      //}
      //function hasWriteAccess(){
      	//let todoList = getTodoList();
        //return todoList.members.get([request.auth.uid, "canEdit"], null) == true;
      //}
    	//allow read: if request.auth != null && ( isOwner() || isMember() );
      allow read: if request.auth != null;
      allow create, delete:
      	if request.auth != null;
      allow delete:
      	if  request.auth != null && isOwner();
      allow update:
      	//if request.auth != null && ( isOwner() || hasWriteAccess() );
        if request.auth != null;
    }
    
  }
}